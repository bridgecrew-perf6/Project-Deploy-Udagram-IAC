Description: >
  Mohamed Badr / Udacity Cloud DevOps Nano Degree Project
    Deploy a high-availability web app Udagram using CloudFormation
    This Script creates the Servers Infra of the project
    It depends on the Output values of UdagramAppNetwork Stack

Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String


Resources:

  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  UdagramServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to Udagram Server
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  EC2ReadOnlyS3Role:
      Type: AWS::IAM::Role
      Properties: 
        AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: Allow
                    Principal:
                      Service:
                        - ec2.amazonaws.com
                    Action:
                      - 'sts:AssumeRole'
        ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

  EC2InstanceProfile: 
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Roles: 
        - !Ref EC2ReadOnlyS3Role

  UdagramAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
           #!/bin/bash
            apt-get update -y
            apt-get install apache2 -y
            systemctl start apache2.service
            cd /var/www/html
            echo "it works! Udagram, Udacity" > index.html         
      ImageId: ami-0e472ba40eb589f49
      SecurityGroups:
      - Ref: UdagramServerSecGroup
      InstanceType: t3.small
      IamInstanceProfile: !Ref EC2InstanceProfile
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: '10'
  
  UdagramAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PRV-NETS"
      LaunchConfigurationName:
        Ref: UdagramAppLaunchConfig
      MinSize: '4'
      MaxSize: '4'
      TargetGroupARNs:
      - Ref: UdagramAppTargetGroup
 
  UdagramAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
      - Ref: LBSecGroup
 
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: UdagramAppTargetGroup
      LoadBalancerArn:
        Ref: UdagramAppLB
      Port: '80'
      Protocol: HTTP
  
  LBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'UdagramAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1
 
  UdagramAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

  BastionHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow SSH to Bastion Host
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 102.189.219.22/32
        #Allowed Only to My IP
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  BastionHostLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:     
      ImageId: ami-03ededff12e34e59e
      SecurityGroups:
        - Ref: BastionHostSecurityGroup
      InstanceType: t2.micro
      KeyName: "BastionHostKey"
  
  BastionHostGroup:
  #Created Auto Scaling Group for the BastionHost so even this machine will have no point of failure
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue: 
          !Sub "${EnvironmentName}-PUB-NETS"
      LaunchConfigurationName:
        Ref: BastionHostLaunchConfig
      MinSize: '1'
      MaxSize: '1'

Outputs: 

    UdagramURL: 
        Description: A reference to the created VPC
        Value: !Join [ "", [ 'http://', !GetAtt UdagramAppLB.DNSName ]]
        # got the GetAtt DNSName from AWS documentation https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-getatt.html 
        Export:
          Name: !Sub ${EnvironmentName}-URL

